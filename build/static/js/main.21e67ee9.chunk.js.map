{"version":3,"sources":["utils/duration/index.js","pomodoro/Focus.js","pomodoro/Break.js","pomodoro/TimeAndProgress.js","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","Focus","session","focusDuration","setFocusDuration","className","data-testid","type","onClick","disabled","Break","breakDuration","setBreakDuration","TimeAndProgress","isTimerRunning","totalDuration","label","percent","timeRemaining","givenSeconds","seconds","round","secondsToDuration","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","classNameToBoolean","useState","setIsTimerRunning","setSession","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","currentSession","nextSession","aria-label","title","nextState","prevStateSession","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21e67ee9.chunk.js","sourcesContent":["/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from 'react';\nimport { minutesToDuration } from '../utils/duration/index';\n\nconst Focus = ({ session, focusDuration, setFocusDuration }) => {\n  // event handlers\n  const handleMinusClick = () => {\n    focusDuration <= 5\n      ? setFocusDuration(5)\n      : setFocusDuration(focusDuration - 5);\n  };\n\n  const handlePlusClick = () => {\n    focusDuration >= 60\n      ? setFocusDuration(60)\n      : setFocusDuration(focusDuration + 5);\n  };\n\n  return (\n    <div className=\"Focus col\">\n      <div className=\"input-group input-group-lg mb-2\">\n        <span className=\"input-group-text\" data-testid=\"duration-focus\">\n          {/* TODO: Update this text to display the current focus session duration */}\n          Focus Duration: {minutesToDuration(focusDuration)}\n        </span>\n        <div className=\"input-group-append\">\n          {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"decrease-focus\"\n            onClick={handleMinusClick}\n            disabled={session ? true : false}\n          >\n            <span className=\"oi oi-minus\" />\n          </button>\n          {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            data-testid=\"increase-focus\"\n            onClick={handlePlusClick}\n            disabled={session ? true : false}\n          >\n            <span className=\"oi oi-plus\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Focus;\n\n\n","import React from 'react';\nimport { minutesToDuration } from '../utils/duration/index';\n\nconst Break = ({ session, breakDuration, setBreakDuration }) => {\n  // event handlers\n  const handleMinusClick = () => {\n    breakDuration <= 1\n      ? setBreakDuration(1)\n      : setBreakDuration(breakDuration - 1);\n  };\n\n  const handlePlusClick = () => {\n    breakDuration >= 15\n      ? setBreakDuration(15)\n      : setBreakDuration(breakDuration + 1);\n  };\n\n  return (\n    <div className=\"col\">\n      <div className=\"float-right\">\n        <div className=\"input-group input-group-lg mb-2\">\n          <span className=\"input-group-text\" data-testid=\"duration-break\">\n            {/* TODO: Update this text to display the current break session duration */}\n            Break Duration: {minutesToDuration(breakDuration)}\n          </span>\n          <div className=\"input-group-append\">\n            {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"decrease-break\"\n              onClick={handleMinusClick}\n              disabled={session ? true : false}\n            >\n              <span className=\"oi oi-minus\" />\n            </button>\n            {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"increase-break\"\n              onClick={handlePlusClick}\n              disabled={session ? true : false}\n            >\n              <span className=\"oi oi-plus\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Break;\n","import React from 'react';\nimport { minutesToDuration, secondsToDuration } from '../utils/duration';\n\nconst TimeAndProgress = ({\n  session,\n  isTimerRunning,\n  focusDuration,\n  breakDuration,\n}) => {\n  let totalDuration =\n    session?.label === 'Focusing' ? focusDuration * 60 : breakDuration * 60;\n  // 300 - 300, 299, 298\n\n  let elapsedTime = totalDuration - session?.timeRemaining;\n  let percent = (elapsedTime / totalDuration) * 100;\n\n  return (\n    <div>\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n          <h2 data-testid=\"session-title\">\n            {session?.label} for{' '}\n            {session?.label === 'Focusing'\n              ? minutesToDuration(focusDuration)\n              : minutesToDuration(breakDuration)}{' '}\n            minutes\n          </h2>\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\n          <p className=\"lead\" data-testid=\"session-sub-title\">\n            {secondsToDuration(session?.timeRemaining)} remaining\n          </p>\n          <h3>{isTimerRunning ? null : 'Paused'}</h3>\n        </div>\n      </div>\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress\" style={{ height: '20px' }}>\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={percent} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${percent}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TimeAndProgress;\n","import React, { useState } from 'react';\nimport classNames from '../utils/class-names';\nimport useInterval from '../utils/useInterval';\nimport Focus from './Focus';\nimport Break from './Break';\nimport TimeAndProgress from './TimeAndProgress';\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === 'Focusing') {\n      return {\n        label: 'On Break',\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: 'Focusing',\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(\n    () => {\n      if (session.timeRemaining === 0) {\n        new Audio('https://bigsoundbank.com/UPLOAD/mp3/1482.mp3').play();\n        return setSession(nextSession(focusDuration, breakDuration));\n      }\n      return setSession(nextTick);\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: 'Focusing',\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  // event handler\n  const handleStopClick = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n  };\n\n  const renderTimeAndProgress = () => {\n    if (session) {\n      return (\n        <TimeAndProgress\n          session={session}\n          isTimerRunning={isTimerRunning}\n          focusDuration={focusDuration}\n          breakDuration={breakDuration}\n        />\n      );\n    } else {\n      return null;\n    }\n  };\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        {/* Focus Component */}\n        <Focus\n          session={session}\n          focusDuration={focusDuration}\n          setFocusDuration={setFocusDuration}\n        />\n        {/* Break Component */}\n        <Break\n          session={session}\n          breakDuration={breakDuration}\n          setBreakDuration={setBreakDuration}\n        />\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  'oi-media-play': !isTimerRunning,\n                  'oi-media-pause': isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n            {/* TODO: Disable the stop button when there is no active session */}\n            <button\n              type=\"button\"\n              className=\"btn btn-secondary\"\n              data-testid=\"stop\"\n              title=\"Stop the session\"\n              onClick={handleStopClick}\n              disabled={session ? false : true}\n            >\n              <span className=\"oi oi-media-stop\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {renderTimeAndProgress()}\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}